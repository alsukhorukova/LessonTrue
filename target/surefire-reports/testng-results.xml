<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="4" passed="3" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2022-03-23T20:24:01 MSK" name="Suit1" finished-at="2022-03-23T20:24:01 MSK" duration-ms="120">
    <groups>
    </groups>
    <test started-at="2022-03-23T20:24:01 MSK" name="myFile" finished-at="2022-03-23T20:24:01 MSK" duration-ms="62">
      <class name="firstTests.FirstTest">
        <test-method is-config="true" signature="beforeT()[pri:0, instance:firstTests.FirstTest@9f116cc]" started-at="2022-03-23T20:24:01 MSK" name="beforeT" finished-at="2022-03-23T20:24:01 MSK" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeT -->
        <test-method is-config="true" signature="beforeN()[pri:0, instance:firstTests.FirstTest@9f116cc]" started-at="2022-03-23T20:24:01 MSK" name="beforeN" finished-at="2022-03-23T20:24:01 MSK" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeN -->
        <test-method signature="startTest()[pri:0, instance:firstTests.FirstTest@9f116cc]" started-at="2022-03-23T20:24:01 MSK" name="startTest" finished-at="2022-03-23T20:24:01 MSK" duration-ms="11" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Проверяем, что текст содержит expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Проверяем, что текст содержит expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.asserts.Assertion$1.doAssert(Assertion.java:86)
at org.testng.asserts.Assertion.executeAssert(Assertion.java:25)
at org.testng.asserts.Assertion.doAssert(Assertion.java:12)
at org.testng.asserts.Assertion.assertTrue(Assertion.java:82)
at firstTests.FirstTest.startTest(FirstTest.java:43)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:283)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:120)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="afterN()[pri:0, instance:firstTests.FirstTest@9f116cc]" started-at="2022-03-23T20:24:01 MSK" name="afterN" finished-at="2022-03-23T20:24:01 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterN -->
        <test-method is-config="true" signature="afterT()[pri:0, instance:firstTests.FirstTest@9f116cc]" started-at="2022-03-23T20:24:01 MSK" name="afterT" finished-at="2022-03-23T20:24:01 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterT -->
      </class> <!-- firstTests.FirstTest -->
    </test> <!-- myFile -->
    <test started-at="2022-03-23T20:24:01 MSK" name="Parampampam" finished-at="2022-03-23T20:24:01 MSK" duration-ms="24">
      <class name="firstTests.ThirdTest">
        <test-method is-config="true" signature="beforeT()[pri:0, instance:firstTests.ThirdTest@6cf0e0ba]" started-at="2022-03-23T20:24:01 MSK" name="beforeT" finished-at="2022-03-23T20:24:01 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeT -->
        <test-method signature="startTest(java.lang.String,java.lang.String)[pri:0, instance:firstTests.ThirdTest@6cf0e0ba]" started-at="2022-03-23T20:24:01 MSK" name="startTest" finished-at="2022-03-23T20:24:01 MSK" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[GG]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[BG]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="beforeN()[pri:0, instance:firstTests.ThirdTest@6cf0e0ba]" started-at="2022-03-23T20:24:01 MSK" name="beforeN" finished-at="2022-03-23T20:24:01 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeN -->
        <test-method is-config="true" signature="beforeN()[pri:0, instance:firstTests.ThirdTest@6cf0e0ba]" started-at="2022-03-23T20:24:01 MSK" name="beforeN" finished-at="2022-03-23T20:24:01 MSK" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeN -->
        <test-method is-config="true" signature="afterN()[pri:0, instance:firstTests.ThirdTest@6cf0e0ba]" started-at="2022-03-23T20:24:01 MSK" name="afterN" finished-at="2022-03-23T20:24:01 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterN -->
        <test-method signature="startTestV2()[pri:1, instance:firstTests.ThirdTest@6cf0e0ba]" started-at="2022-03-23T20:24:01 MSK" name="startTestV2" finished-at="2022-03-23T20:24:01 MSK" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTestV2 -->
        <test-method is-config="true" signature="afterN()[pri:0, instance:firstTests.ThirdTest@6cf0e0ba]" started-at="2022-03-23T20:24:01 MSK" name="afterN" finished-at="2022-03-23T20:24:01 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterN -->
        <test-method signature="startTest()[pri:2, instance:firstTests.ThirdTest@6cf0e0ba]" started-at="2022-03-23T20:24:01 MSK" name="startTest" finished-at="2022-03-23T20:24:01 MSK" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startTest -->
        <test-method is-config="true" signature="beforeN()[pri:0, instance:firstTests.ThirdTest@6cf0e0ba]" started-at="2022-03-23T20:24:01 MSK" name="beforeN" finished-at="2022-03-23T20:24:01 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeN -->
        <test-method is-config="true" signature="afterN()[pri:0, instance:firstTests.ThirdTest@6cf0e0ba]" started-at="2022-03-23T20:24:01 MSK" name="afterN" finished-at="2022-03-23T20:24:01 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterN -->
        <test-method is-config="true" signature="afterT()[pri:0, instance:firstTests.ThirdTest@6cf0e0ba]" started-at="2022-03-23T20:24:01 MSK" name="afterT" finished-at="2022-03-23T20:24:01 MSK" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterT -->
      </class> <!-- firstTests.ThirdTest -->
    </test> <!-- Parampampam -->
  </suite> <!-- Suit1 -->
</testng-results>
